---
description:
globs:
alwaysApply: true
---

# Cursor Rules — **Shadcn UI for Next.js** (machine-readable, Markdown)

> Apply these directives when generating or editing UI in a Next.js app that uses **shadcn/ui**, **Tailwind CSS**, **Radix UI**, and **TypeScript**.  
> Treat each line prefixed with a keyword (`RULE:`, `REQUIRE:`, `IF`, `THEN`, `DO`, `DO NOT`) as executable guidance.

---

## 1) MCP FIRST PRINCIPLES

- REQUIRE: **Always consult MCP** before implementing UI.
- RULE: Query the **“mcp demo tool”** for an example/spec **before** writing any component or page.
- IF the “mcp demo tool” returns a matching pattern  
  THEN **conform** to its structure, naming, props, and UX notes verbatim.  
- IF no pattern is found  
  THEN proceed with rules below and **emit a short “No MCP pattern found” note** in the PR description.

---

## 2) TECH BASELINE

- REQUIRE: Next.js (App Router), TypeScript, shadcn/ui, Tailwind CSS, Radix primitives, lucide-react icons.
- REQUIRE: `typescript` `"strict": true`; ESLint + Prettier.
- REQUIRE: Dark mode via class strategy (`class` on `<html>`), theme tokens from shadcn preset.
- DO: Use Server Components by default; **Client Components only when needed** (interactivity, hooks, browser APIs).

---

## 3) FILE & NAMING CONVENTIONS

- REQUIRE: **Paths**
  - Pages: `app/(segment)/(subsegment)/page.tsx`
  - Layouts: `app/(segment)/layout.tsx`
  - UI components: `components/ui/*` (generated by shadcn)
  - Feature components: `components/{feature}/*`
  - Hooks: `hooks/use-*.ts`
  - Schemas: `lib/validators/*.ts` (zod)
  - Utils: `lib/*.ts`
- REQUIRE: **Names**
  - Components: `PascalCase.tsx`
  - Hooks: `useCamelCase.ts`
  - Files export **single default component** (except `ui/*` which may export named).

---

## 4) SHADCN COMPONENT USAGE

- REQUIRE: Prefer shadcn/ui primitives **before** custom code.
- RULE: Button variants must include `default`, `secondary`, `destructive`, `ghost`, `link` using shadcn’s `cva`.
- RULE: Forms use `react-hook-form` + `@hookform/resolvers` + `zod`.
- RULE: Dialogs, Popovers, Menus, Tabs, Accordion, Tooltip → use shadcn wrappers over Radix.
- RULE: For tables use `@tanstack/react-table` with shadcn table styles.
- RULE: For charts use `recharts` wrapped in a `Card` with `CardHeader`, `CardContent`.

---

## 5) LAYOUT & RESPONSIVENESS

- REQUIRE: Container widths use Tailwind `container` + `max-w-screen-*` tokens.
- RULE: Grid first, then flex.  
- RULE: Mobile-first; ensure **≥320px** works; define breakpoints at `sm`, `md`, `lg`, `xl`, `2xl`.
- RULE: Use `AspectRatio` for media; images via `next/image` with `fill` when appropriate.
- DO: Provide keyboard navigation order and visible focus states.

---

## 6) ACCESSIBILITY (A11y)

- REQUIRE: Use semantics (landmarks, headings hierarchy).  
- REQUIRE: All interactive elements must be reachable by **Tab**, operable by **Enter/Space**.  
- REQUIRE: Provide `aria-*` for icon-only controls; Tooltips **supplement**, not replace labels.  
- DO NOT: Remove focus outlines; customize them instead via Tailwind.

---

## 7) STATE, DATA, AND FETCHING

- RULE: Server Components fetch via `async` directly; **no client fetch if not needed**.
- RULE: Client interactivity uses `use client` + React Query (`@tanstack/react-query`) **only** when caching or mutation benefits exist.
- RULE: Mutations must show optimistic UI where safe and include shadcn `toast` feedback.
- REQUIRE: All payloads validated with **zod** at boundaries (forms, server actions, API).

---

## 8) FORMS & VALIDATION

- REQUIRE: `react-hook-form` + `zodResolver(schema)`; show errors with `FormMessage`.
- RULE: Submit buttons show loading state; disable while submitting.
- RULE: Use `Form`, `FormField`, `FormItem`, `FormLabel`, `FormControl`, `FormMessage` from shadcn.

---

## 9) THEMING & STYLE

- REQUIRE: Use Tailwind tokens; **no inline styles** except dynamic CSS variables.
- RULE: Colors come from shadcn theme variables; support **light/dark** automatically.
- RULE: Animation via `framer-motion` with **reduced-motion** respect.

---

## 10) ICONS & MEDIA

- REQUIRE: Use `lucide-react`; size via `className="h-4 w-4"` by default.
- RULE: Decorative icons get `aria-hidden="true"`; informative icons need `aria-label` or adjacent text.

---

## 11) ERROR, EMPTY, LOADING STATES

- REQUIRE: For async UI provide all three:
  - Loading: skeletons (`components/ui/skeleton`) or spinners sized to context.
  - Empty: icon + title + action (primary CTA).
  - Error: `Alert` with retry action; log details to console only in dev.

---

## 12) PERFORMANCE

- RULE: Use `next/dynamic` for heavy client components; disable SSR only when required.
- RULE: Co-locate data to avoid waterfalls; prefer parallel `await Promise.all`.
- REQUIRE: Images optimized via `next/image`; set `sizes`.
- DO NOT: Ship unused shadcn components; remove when not referenced.

---

## 13) TESTING & QUALITY

- REQUIRE: Unit test key UI logic with **Vitest** or **Jest**; component tests with **React Testing Library**.
- REQUIRE: Lint passes (`eslint --max-warnings=0`) and typecheck passes.
- RULE: Snapshots allowed only for stable, purely presentational components.

---

## 14) ROUTING & METADATA

- REQUIRE: Use App Router `generateMetadata` for SEO; include title, description, `openGraph`, `robots`.
- RULE: Provide canonical URL on marketing pages; include `metadataBase`.

---

## 15) TOASTS, DIALOGS, AND CONFIRM FLOWS

- REQUIRE: Use `useToast()` for user notifications; success, error, info variants.
- RULE: Destructive actions require a **confirm Dialog** with explicit `Cancel` + `Confirm` and keyboard shortcuts.

---

## 16) TABLES, LISTS, PAGINATION

- REQUIRE: Data tables use TanStack; include:
  - Column defs with `accessorKey`
  - Sorting, filtering, pagination controls top-right
  - Empty state row and skeleton rows while loading

---

## 17) CODE EXAMPLES (SCHEMATIC)

```tsx
// components/users/users-table.tsx
"use client";
import { ColumnDef } from "@tanstack/react-table";
import { DataTable } from "@/components/ui/data-table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";

export type UserRow = { id: string; name: string; email: string; role: "admin"|"member" };

export const columns: ColumnDef<UserRow>[] = [
  { accessorKey: "name", header: "Name" },
  { accessorKey: "email", header: "Email" },
  { accessorKey: "role", header: "Role",
    cell: ({ row }) => <Badge variant="secondary">{row.original.role}</Badge> },
  { id: "actions",
    cell: ({ row }) => <Button variant="ghost" size="sm">View</Button> }
];

// Usage in a page/client component:
// <DataTable columns={columns} data={rows} />
```

```tsx
// app/(dashboard)/users/page.tsx
import { Suspense } from "react";
import { UsersTable } from "@/components/users/users-table";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";

export default async function Page() {
  const users = await getUsers(); // server fetch
  return (
    <Card>
      <CardHeader><CardTitle>Users</CardTitle></CardHeader>
      <CardContent>
        <Suspense fallback={<Skeleton className="h-72 w-full" />}>
          {/* If you need client features, render a client wrapper */}
          <UsersTable data={users} />
        </Suspense>
      </CardContent>
    </Card>
  );
}
```

---

## 18) PR CHECKLIST (AUTO-ENFORCE)

- REQUIRE: “MCP pattern reference” link or “No MCP pattern found” note.
- REQUIRE: Screenshots for light/dark, mobile/desktop.
- REQUIRE: A11y pass (keyboard path + labels).
- REQUIRE: Tests, lint, typecheck green.

---

## 19) DO / DO NOT SUMMARY

- DO: Prefer shadcn primitives, server components, zod-validated forms, accessible patterns, responsive grid.
- DO: Centralize variants via `cva`; use toast feedback; handle loading/empty/error.
- DO NOT: Inline styles, ad-hoc colors, client fetch without need, custom widgets that exist in shadcn, breaking MCP patterns.

---

## 20) UPGRADE & GENERATION RULE

- IF generating a **new component**  
  THEN run `npx shadcn@latest add <component>` and adapt variants only via `cva`.
- IF a required shadcn component is missing  
  THEN prefer adding from library over custom-building, unless MCP mandates custom.

---