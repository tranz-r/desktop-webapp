/******* Do not edit this file *******
Simple Custom CSS and JS - by Silkypress.com
Saved: May 23 2025 | 11:52:28 */
const slidesContainer = document.querySelector('.mm-carousel-slides');
    const slideElements = document.querySelectorAll('.mm-slide');
    const prevBtn = document.querySelector('.prev');
    const nextBtn = document.querySelector('.next');
    const dotsContainer = document.querySelector('.carousel-dots');

    let currentIndex = 1;
    let autoPlay;

    // Clone first and last slide
    const firstClone = slideElements[0].cloneNode(true);
    const lastClone = slideElements[slideElements.length - 1].cloneNode(true);

    firstClone.classList.add('clone');
    lastClone.classList.add('clone');

    slidesContainer.appendChild(firstClone);
    slidesContainer.insertBefore(lastClone, slideElements[0]);

    const slides = document.querySelectorAll('.mm-slide'); // Update with clones
    const slideCount = slideElements.length;
    const slideWidth = slides[0].clientWidth;

    slidesContainer.style.transform = `translateX(-${slideWidth * currentIndex}px)`;

    // Create dots
    for (let i = 0; i < slideCount; i++) {
        const dot = document.createElement('button');
        dot.classList.add('dot');
        if (i === 0) dot.classList.add('active');
        dot.addEventListener('click', () => goToSlide(i + 1));
        dotsContainer.appendChild(dot);
    }

    function updateDots(index) {
        const dots = document.querySelectorAll('.dot');
        dots.forEach((dot, i) => {
            dot.classList.toggle('active', i === index - 1);
        });
    }

    function goToSlide(index) {
        currentIndex = index;
        slidesContainer.style.transition = 'transform 0.5s ease-in-out';
        slidesContainer.style.transform = `translateX(-${slideWidth * currentIndex}px)`;
        updateDots(index);
    }

    function nextSlide() {
        if (currentIndex >= slides.length - 1) return;
        currentIndex++;
        slidesContainer.style.transition = 'transform 0.5s ease-in-out';
        slidesContainer.style.transform = `translateX(-${slideWidth * currentIndex}px)`;
        updateDots((currentIndex === slideCount + 1) ? 1 : currentIndex);
    }

    function prevSlide() {
        if (currentIndex <= 0) return;
        currentIndex--;
        slidesContainer.style.transition = 'transform 0.5s ease-in-out';
        slidesContainer.style.transform = `translateX(-${slideWidth * currentIndex}px)`;
        updateDots((currentIndex === 0) ? slideCount : currentIndex);
    }

    // Looping behavior
    slidesContainer.addEventListener('transitionend', () => {
        if (slides[currentIndex].classList.contains('clone')) {
            slidesContainer.style.transition = 'none';
            if (currentIndex === 0) {
                currentIndex = slideCount;
            } else if (currentIndex === slides.length - 1) {
                currentIndex = 1;
            }
            slidesContainer.style.transform = `translateX(-${slideWidth * currentIndex}px)`;
        }
    });

    prevBtn.addEventListener('click', prevSlide);
    nextBtn.addEventListener('click', nextSlide);

    // Auto-advance
    function startAutoPlay() {
        autoPlay = setInterval(nextSlide, 5000);
    }

    function stopAutoPlay() {
        clearInterval(autoPlay);
    }

    document.querySelector('.mm-carousel-container').addEventListener('mouseenter', stopAutoPlay);
    document.querySelector('.mm-carousel-container').addEventListener('mouseleave', startAutoPlay);

    window.addEventListener('resize', () => {
        slidesContainer.style.transition = 'none';
        slidesContainer.style.transform = `translateX(-${slides[0].clientWidth * currentIndex}px)`;
    });

    startAutoPlay();


// add label for file upload
document.addEventListener("DOMContentLoaded", function () {
    const fileInput = document.getElementById("wpforms-19613-field_23");

    // === 1. Create and insert the custom label ===
    const customLabel = document.createElement("label");
    customLabel.setAttribute("for", "wpforms-19613-field_23");
    customLabel.classList.add("custom-upload");

    const img = document.createElement("img");
    img.src = "/wp-content/uploads/2025/05/arrow.svg";
    img.alt = "";

    customLabel.appendChild(img);

    // ✅ Append <span>Upload File</span> below the image
    customLabel.appendChild(document.createElement("span")).textContent = "Upload File";

    // ✅ Insert customLabel after the .wpforms-field-description element
    const descriptionEl = fileInput.closest('.wpforms-field').querySelector('.wpforms-field-description');
    if (descriptionEl) {
        descriptionEl.insertAdjacentElement('afterend', customLabel);
    }

    // === 2. Create and insert the file name display div ===
    const fileNameDiv = document.createElement("div");
    fileNameDiv.id = "mm-file-name";
    fileNameDiv.className = "mm-file-name";
    fileInput.parentNode.insertBefore(fileNameDiv, fileInput.nextSibling);

    // === 3. Add change event listener to update file name ===
    fileInput.addEventListener("change", function () {
        const fileName = fileInput.files.length > 0 ? fileInput.files[0].name : "";
        fileNameDiv.textContent = fileName ? `Selected file: ${fileName}` : "";
    });
});




//zipcode form entry
document.addEventListener('DOMContentLoaded', function () {
    const input = document.querySelector('.mm-zipcode input[type="text"]');
    if (input) {
        input.addEventListener('input', function () {
            // Remove non-numeric characters and limit to 5 digits
            this.value = this.value.replace(/[^0-9]/g, '').slice(0, 5);
        });
    }
});